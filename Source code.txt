import pandas as pd
import numpy as np
import nltk
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
import joblib
# Load dataset
df = pd.read_csv("social_emotion_dataset.csv")
# Preprocess
nltk.download('punkt')
df['text'] = df['text'].astype(str)
label_encoder = LabelEncoder()
df['label'] = label_encoder.fit_transform(df['emotion'])
# Tokenize
tokenizer = Tokenizer(num_words=5000, oov_token="<OOV>")
tokenizer.fit_on_texts(df['text'])
sequences = tokenizer.texts_to_sequences(df['text'])
padded = pad_sequences(sequences, maxlen=100)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(padded, df['label'], test_size=0.2, random_state=42)
# Build model
model = Sequential()
model.add(Embedding(5000, 64, input_length=100))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(6, activation='softmax'))  # Adjust classes
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
# Train
model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))
# Save model and tokenizer
model.save("emotion_model.h5")
joblib.dump(tokenizer, "tokenizer.pkl")
joblib.dump(label_encoder, "label_encoder.pkl")